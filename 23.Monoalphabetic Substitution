#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// English letter frequency (in percentage)
const float englishFreq[] = {8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094,
                             6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929,
                             0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150,
                             1.974, 0.074};

// Function to count letter frequencies in the ciphertext
void countLetterFreq(const char *ciphertext, int freq[]) {
    int i;
    memset(freq, 0, 26 * sizeof(int)); // Initialize frequencies to zero

    // Count frequencies of each letter
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            int index = toupper(ciphertext[i]) - 'A';
            freq[index]++;
        }
    }
}

// Function to calculate chi-square statistic
float calculateChiSquare(int freq[], int total) {
    float chiSquare = 0.0;
    int i;
    for (i = 0; i < 26; i++) {
        float observed = freq[i];
        float expected = (englishFreq[i] / 100.0) * total;
        chiSquare += ((observed - expected) * (observed - expected)) / expected;
    }
    return chiSquare;
}

// Function to decrypt the ciphertext using a given key
void decryptWithKey(const char *ciphertext, char *plaintext, char key[]) {
    int i;
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char c = toupper(ciphertext[i]);
            plaintext[i] = key[c - 'A'];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[i] = '\0';
}

// Function to perform frequency attack and print top possible plaintexts
void frequencyAttack(const char *ciphertext, int topPlaintexts) {
    int freq[26];
    countLetterFreq(ciphertext, freq);

    // Calculate total number of valid letters in ciphertext
    int total = 0;
    for (int i = 0; i < 26; i++) {
        total += freq[i];
    }

    // Calculate chi-square values for all possible shifts
    float chiSquares[26];
    for (int shift = 0; shift < 26; shift++) {
        char key[26];
        for (int i = 0; i < 26; i++) {
            key[i] = 'A' + (i + shift) % 26;
        }

        char plaintext[1000];
        decryptWithKey(ciphertext, plaintext, key);

        int plaintextFreq[26];
        countLetterFreq(plaintext, plaintextFreq);

        float chiSquare = calculateChiSquare(plaintextFreq, total);
        chiSquares[shift] = chiSquare;
    }

    // Sort chi-square values and determine possible plaintexts
    for (int i = 0; i < topPlaintexts; i++) {
        float minChiSquare = chiSquares[0];
        int minIndex = 0;
        for (int j = 1; j < 26; j++) {
            if (chiSquares[j] < minChiSquare) {
                minChiSquare = chiSquares[j];
                minIndex = j;
            }
        }

        printf("\nPlaintext %d (Chi-square = %.2f):\n", i + 1, minChiSquare);
        char key[26];
        for (int k = 0; k < 26; k++) {
            key[k] = 'A' + (k + minIndex) % 26;
        }

        char plaintext[1000];
        decryptWithKey(ciphertext, plaintext, key);
        printf("%s\n", plaintext);

        chiSquares[minIndex] = 1000.0; // Set to a high value to exclude from further consideration
    }
}

int main() {
    char ciphertext[] = "qf nyrx, qfn lfj nys nym qfylx xyj nlj; fnaj ymfy qf nmrj";
    int topPlaintexts = 5; // Number of top plaintexts to display

    printf("Ciphertext:\n%s\n", ciphertext);
    printf("\nAttempting to decrypt...\n");

    frequencyAttack(ciphertext, topPlaintexts);

    return 0;
}
