#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

// Initial permutation table for S-DES
const int IP[] = {2, 6, 3, 1, 4, 8, 5, 7};
// Final permutation table for S-DES
const int IP_INV[] = {4, 1, 3, 5, 7, 2, 8, 6};
// Expansion permutation table for S-DES
const int EP[] = {4, 1, 2, 3, 2, 3, 4, 1};
// P4 permutation table for S-DES
const int P4[] = {2, 4, 3, 1};
// Initial permutation for key generation in S-DES
const int P10[] = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6};
// Permutation after key generation in S-DES
const int P8[] = {6, 3, 7, 4, 8, 5, 10, 9};
// S-DES S-boxes
const int S0[4][4] = {
    {1, 0, 3, 2},
    {3, 2, 1, 0},
    {0, 2, 1, 3},
    {3, 1, 3, 2}
};
const int S1[4][4] = {
    {0, 1, 2, 3},
    {2, 0, 1, 3},
    {3, 0, 1, 0},
    {2, 1, 0, 3}
};

// Function to perform permutation according to a given permutation table
void permute(int *input, const int *permutation, int size) {
    int output[size];
    for (int i = 0; i < size; ++i) {
        output[i] = input[permutation[i] - 1];
    }
    for (int i = 0; i < size; ++i) {
        input[i] = output[i];
    }
}

// Function to generate a subkey in S-DES
void generate_subkey(int *key, int *subkey1, int *subkey2) {
    // Apply P10 permutation
    permute(key, P10, 10);

    // Split into left and right halves
    int left[5], right[5];
    for (int i = 0; i < 5; ++i) {
        left[i] = key[i];
        right[i] = key[i + 5];
    }

    // Circular left shift
    int temp = left[0];
    for (int i = 0; i < 4; ++i) {
        left[i] = left[i + 1];
        right[i] = right[i + 1];
    }
    left[4] = temp;
    right[4] = left[0];

    // Combine and apply P8 permutation to get subkey1
    for (int i = 0; i < 5; ++i) {
        key[i] = left[i];
        key[i + 5] = right[i];
    }
    permute(key, P8, 8);
    for (int i = 0; i < 8; ++i) {
        subkey1[i] = key[i];
    }

    // Circular left shift again
    temp = left[0];
    for (int i = 0; i < 4; ++i) {
        left[i] = left[i + 1];
        right[i] = right[i + 1];
    }
    left[4] = temp;
    right[4] = left[0];

    // Combine and apply P8 permutation to get subkey2
    for (int i = 0; i < 5; ++i) {
        key[i] = left[i];
        key[i + 5] = right[i];
    }
    permute(key, P8, 8);
    for (int i = 0; i < 8; ++i) {
        subkey2[i] = key[i];
    }
}

// Function to perform S-DES encryption
void sdes_encrypt(int *plaintext, int *key, int *ciphertext) {
    int subkey1[8], subkey2[8];
    generate_subkey(key, subkey1, subkey2);

    // Initial permutation (IP)
    permute(plaintext, IP, 8);

    // Split into left and right halves
    int left[4], right[4];
    for (int i = 0; i < 4; ++i) {
        left[i] = plaintext[i];
        right[i] = plaintext[i + 4];
    }

    // Expansion permutation (EP) on the right half
    int expanded_right[8];
    for (int i = 0; i < 8; ++i) {
        expanded_right[i] = right[EP[i] - 1];
    }

    // XOR with subkey1
    for (int i = 0; i < 8; ++i) {
        expanded_right[i] ^= subkey1[i];
    }

    // S-box substitution
    int sbox0_row = expanded_right[0] * 2 + expanded_right[3];
    int sbox0_col = expanded_right[1] * 2 + expanded_right[2];
    int sbox1_row = expanded_right[4] * 2 + expanded_right[7];
    int sbox1_col = expanded_right[5] * 2 + expanded_right[6];

    int sbox0_out = S0[sbox0_row][sbox0_col];
    int sbox1_out = S1[sbox1_row][sbox1_col];

    // P4 permutation
    int p4_output[4] = {sbox0_out / 2, sbox0_out % 2, sbox1_out / 2, sbox1_out % 2};

    // XOR with left half
    for (int i = 0; i < 4; ++i) {
        p4_output[i] ^= left[i];
    }

    // Swap left and right halves
    for (int i = 0; i < 4; ++i) {
        left[i] = right[i];
        right[i] = p4_output[i];
    }

    // Final permutation (IP_INV)
    for (int i = 0; i < 8; ++i) {
        if (i < 4) {
            ciphertext[i] = right[IP_INV[i] - 1];
        } else {
            ciphertext[i] = left[IP_INV[i] - 5];
        }
    }
}

// Function to perform S-DES decryption
void sdes_decrypt(int *ciphertext, int *key, int *plaintext) {
    int subkey1[8], subkey2[8];
    generate_subkey(key, subkey1, subkey2);

    // Initial permutation (IP)
    permute(ciphertext, IP, 8);

    // Split into left and right halves
    int left[4], right[4];
    for (int i = 0; i < 4; ++i) {
        left[i] = ciphertext[i];
        right[i] = ciphertext[i + 4];
    }

    // Expansion permutation (EP) on the right half
    int expanded_right[8];
    for (int i = 0; i < 8; ++i) {
        expanded_right[i] = right[EP[i] - 1];
    }

    // XOR with subkey2
    for (int i = 0; i < 8; ++i) {
        expanded_right[i] ^= subkey2[i];
    }

    // S-box substitution
    int sbox0_row = expanded_right[0] * 2 + expanded_right[3];
    int sbox0_col = expanded_right[1] * 2 + expanded_right[2];
    int sbox1_row = expanded_right[4] * 2 + expanded_right[7];
    int sbox1_col = expanded_right[5] * 2 + expanded_right[6];

    int sbox0_out = S0[sbox0_row][sbox0_col];
    int sbox1_out = S1[sbox1_row][sbox1_col];

    // P4 permutation
    int p4_output[4] = {sbox0_out / 2, sbox0_out % 2, sbox1_out / 2, sbox1_out % 2};

    // XOR with left half
    for (int i = 0; i < 4; ++i) {
        p4_output[i] ^= left[i];
    }

    // Swap left and right halves
    for (int i = 0; i < 4; ++i) {
        left[i] = right[i];
        right[i] = p4_output[i];
    }

    // Final permutation (IP_INV)
    for (int i = 0; i < 8; ++i) {
        if (i < 4) {
            plaintext[i] = right[IP_INV[i] - 1];
        } else {
            plaintext[i] = left[IP_INV[i] - 5];
        }
    }
}

// Function to convert binary string to integer array
void binstr_to_intarray(const char *binstr, int *intarray, int size) {
    for (int i = 0; i < size; ++i) {
        intarray[i] = binstr[i] - '0';
    }
}

// Function to convert integer array to binary string
void intarray_to_binstr(int *intarray, char *binstr, int size) {
    for (int i = 0; i < size; ++i) {
        binstr[i] = intarray[i] + '0';
    }
    binstr[size] = '\0';
}

int main() {
    int plaintext[8], ciphertext[8], decryptedtext[8];
    int key[10] = {0, 1, 1, 1, 1, 1, 1, 0, 1, 0}; // 10-bit binary key: 01111 1010

    // Binary plaintext: 0000 0001 0010 0011
    int plaintext_int[16] = {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0};

    // Binary IV (Initialization Vector): 1010 1010
    int iv_int[8] = {1, 0, 1, 0, 1, 0, 1, 0};

    // Encrypt using CBC mode with S-DES
    printf("Encrypting...\n");
    int xor_result[8];
    for (int i = 0; i < 8; ++i) {
        xor_result[i] = plaintext_int[i] ^ iv_int[i];
    }
    sdes_encrypt(xor_result, key, ciphertext);

    // Print ciphertext in binary format
    char ciphertext_binstr[9];
    intarray_to_binstr(ciphertext, ciphertext_binstr, 8);
    printf("Ciphertext (binary): %s\n", ciphertext_binstr);

    // Decrypt using CBC mode with S-DES
    printf("Decrypting...\n");
    sdes_decrypt(ciphertext, key, decryptedtext);

    // XOR with IV to retrieve plaintext
    for (int i = 0; i < 8; ++i) {
        plaintext[i] = decryptedtext[i] ^ iv_int[i];
    }

    // Print decrypted plaintext in binary format
    char plaintext_binstr[17];
    intarray_to_binstr(plaintext, plaintext_binstr, 8);
    printf("Decrypted plaintext (binary): %s\n", plaintext_binstr);

    return 0;
}
