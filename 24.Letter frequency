#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to decrypt a Caesar cipher with a given key
void decrypt_caesar(char *ciphertext, int key) {
    int i;
    int len = strlen(ciphertext);

    printf("Key %d:\t", key);
    for (i = 0; i < len; i++) {
        char c = ciphertext[i];
        if (isalpha(c)) {
            char decrypted_char = 'A' + ((c - 'A' - key + ALPHABET_SIZE) % ALPHABET_SIZE);
            printf("%c", decrypted_char);
        } else {
            printf("%c", c); // Print non-alphabetic characters as they are
        }
    }
    printf("\n");
}

// Function to count letter frequencies in a string
void count_letter_frequencies(char *text, int *freq) {
    int i;
    int len = strlen(text);

    for (i = 0; i < len; i++) {
        char c = toupper(text[i]);
        if (isalpha(c)) {
            freq[c - 'A']++;
        }
    }
}

// Function to perform letter frequency attack on a ciphertext
void letter_frequency_attack(char *ciphertext, int top_n) {
    int i, j;
    int len = strlen(ciphertext);
    int freq[ALPHABET_SIZE] = {0};

    count_letter_frequencies(ciphertext, freq);

    // Find the most likely key by assuming 'E' (most frequent letter in English) maps to 'E' after decryption
    int max_freq_index = 0;
    for (i = 1; i < ALPHABET_SIZE; i++) {
        if (freq[i] > freq[max_freq_index]) {
            max_freq_index = i;
        }
    }

    int key = (max_freq_index - ('E' - 'A') + ALPHABET_SIZE) % ALPHABET_SIZE;

    // Decrypt using the found key and print the top n possible plaintexts
    printf("Most likely plaintexts:\n");
    for (j = 0; j < top_n; j++) {
        decrypt_caesar(ciphertext, key);
        key = (key + 1) % ALPHABET_SIZE; // Try the next possible key
    }
}

int main() {
    char ciphertext[1000];
    int top_n;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline character if present

    printf("Enter the number of top possible plaintexts to generate: ");
    scanf("%d", &top_n);

    letter_frequency_attack(ciphertext, top_n);

    return 0;
}
